{"version":3,"sources":["assets/constants/themes.ts","components/ThemeContext/ThemeContext.tsx","components/PageLayout/PageLayout.tsx","components/CountryCard/CountryCard.tsx","components/CountryList/CountryList.tsx","components/Search/Search.tsx","components/Filter/Filter.tsx","components/App/App.tsx","hooks/usePostCountryService.ts","serviceWorker.ts","index.tsx"],"names":["dark","textColor","inputColor","elementColor","backgroundColor","light","ThemeContext","React","createContext","darkMode","colors","theme","toggle","ThemeProvider","children","useState","setDarkMode","Provider","value","PageLayout","useContext","className","style","color","onClick","CountryCard","props","src","flag","alt","name","population","region","capital","CountryList","service","status","payload","length","map","country","i","key","error","toString","Search","onChange","type","id","placeholder","target","Filter","onChoice","App","apiQuery","setApiQuery","result","setResult","useEffect","fetch","then","res","ok","Error","json","err","usePostCountryService","action","query","choice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.812671ce.chunk.js","sourcesContent":["export default {\r\n  dark: {\r\n    textColor: \"hsl(0, 0%, 100%)\",\r\n    inputColor: \"hsl(0, 0%, 100%)\",\r\n    elementColor: \"hsl(209, 23%, 22%)\",\r\n    backgroundColor: \"hsl(207, 26%, 17%)\"\r\n  },\r\n  light: {\r\n    textColor: \"hsl(200, 15%, 8%)\",\r\n    inputColor: \"hsl(0, 0%, 52%)\",\r\n    elementColor: \"hsl(0, 0%, 100%)\",\r\n    backgroundColor: \"hsl(0, 0%, 98%)\"\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport theme from \"assets/constants/themes\"\r\n\r\nexport const ThemeContext = React.createContext({\r\n  darkMode: false,\r\n  colors: theme.light,\r\n  toggle: () => {},\r\n})\r\n\r\nexport const ThemeProvider: React.FC<{}> = ({ children }) => {\r\n  const [darkMode, setDarkMode] = useState(false)\r\n\r\n  const toggle = () => {\r\n    const isDark = !darkMode\r\n    setDarkMode(isDark)\r\n  }\r\n\r\n  const colors = darkMode ? theme.dark : theme.light\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, colors, toggle }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\n\r\nexport const PageLayout: React.FC<{}> = ({ children }) => {\r\n  const { colors, toggle } = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className=\"page\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.backgroundColor,\r\n      }}\r\n    >\r\n      <header\r\n        className=\"page__header\"\r\n        style={{\r\n          backgroundColor: colors.elementColor,\r\n        }}\r\n      >\r\n        <h1>Where in the world?</h1>\r\n        <button onClick={toggle} className=\"themeToggle\">\r\n          Switch theme\r\n        </button>\r\n      </header>\r\n      <main className=\"page__content\">{children}</main>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\n\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\nimport { Country } from \"types/Country\"\r\n\r\nimport \"./CountryCard.css\"\r\n\r\nexport const CountryCard: React.FC<Country> = props => {\r\n  const { colors } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n    >\r\n      <img\r\n        src={props.flag}\r\n        alt={`${props.name}'s flag`}\r\n        className=\"card__img\"\r\n      />\r\n      <div className=\"card__info\">\r\n        <p className=\"card__title\">{props.name}</p>\r\n        <span>Population: {props.population}</span>\r\n        <br />\r\n        <span>Region: {props.region}</span>\r\n        <br />\r\n        <span>Capital: {props.capital}</span>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Country } from \"types/Country\"\r\nimport { Service } from \"types/Service\"\r\nimport { CountryCard } from \"components/CountryCard/CountryCard\"\r\n\r\ninterface Props {\r\n  service: Service<Country[]>\r\n}\r\n\r\nexport const CountryList: React.FC<Props> = ({ service }) => (\r\n  <>\r\n    {service.status === \"loading\" && \"Loading...\"}\r\n    {service.status === \"loaded\" && (\r\n      <ul>\r\n        {service.payload && service.payload.length\r\n          ? service.payload.map((country: Country, i: number) => (\r\n              <li key={i}>\r\n                <CountryCard {...country} />\r\n              </li>\r\n            ))\r\n          : \"Nothing found.\"}\r\n      </ul>\r\n    )}\r\n    {service.status === \"error\" && service.error.toString()}\r\n  </>\r\n)\r\n","import React, { useContext } from \"react\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\n\r\ninterface Props {\r\n  onChange: Function\r\n}\r\n\r\nexport const Search: React.FC<Props> = ({ onChange }) => {\r\n  const { colors } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"search\"\r\n      id=\"search\"\r\n      placeholder=\"Search for a country...\"\r\n      onChange={({ target }) => onChange(target.value)}\r\n      className=\"controls__search\"\r\n      style={{\r\n        color: colors.inputColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\n\r\ninterface Props {\r\n  onChoice: Function\r\n}\r\n\r\nexport const Filter: React.FC<Props> = ({ onChoice }) => {\r\n  const { colors } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <select\r\n      id=\"region\"\r\n      name=\"region\"\r\n      className=\"controls__filter\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n      onChange={({ target }) => onChoice(target.value)}\r\n    >\r\n      <option value=\"Africa\">Africa</option>\r\n      <option value=\"Americas\">Americas</option>\r\n      <option value=\"Asia\">Asia</option>\r\n      <option value=\"Europe\">Europe</option>\r\n      <option value=\"Oceania\">Oceania</option>\r\n    </select>\r\n  )\r\n}\r\n","import React, { useState } from \"react\"\r\n\r\nimport \"./App.css\"\r\n\r\nimport { usePostCountryService } from \"hooks/usePostCountryService\"\r\n\r\nimport { ThemeProvider } from \"components/ThemeContext/ThemeContext\"\r\n\r\nimport { PageLayout } from \"components/PageLayout/PageLayout\"\r\nimport { CountryList } from \"components/CountryList/CountryList\"\r\nimport { Search } from \"components/Search/Search\"\r\nimport { Filter } from \"components/Filter/Filter\"\r\n\r\nexport const App: React.FC = () => {\r\n  const handleSearchChange = (query: string): void => {\r\n    if (!query) setApiQuery(\"http://localhost:3000/responseSample.json\")\r\n    if (query.length < 3) return\r\n\r\n    setApiQuery(\r\n      `https://restcountries.eu/rest/v2/name/${query}` +\r\n        `?fields=name;flag;population;region;capital`\r\n    )\r\n  }\r\n\r\n  const handleFilterSelection = (choice: string): void => {\r\n    if (!choice) return\r\n    setApiQuery(`https://restcountries.eu/rest/v2/region/${choice}`)\r\n  }\r\n\r\n  const [apiQuery, setApiQuery]: [string, Function] = useState(\r\n    \"responseSample.json\"\r\n    //   `https://restcountries.eu/rest/v2/all?fields=name;flag;population;region;capital`\r\n  )\r\n  const service = usePostCountryService(apiQuery)\r\n\r\n  return (\r\n    <ThemeProvider>\r\n      <PageLayout>\r\n        <form action=\"#\" className=\"controls\">\r\n          <Search onChange={handleSearchChange} />\r\n          <Filter onChoice={handleFilterSelection} />\r\n        </form>\r\n        <CountryList service={service} />\r\n      </PageLayout>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useEffect, useState } from \"react\"\r\nimport { Service } from \"types/Service\"\r\nimport { Country } from \"types/Country\"\r\n\r\nexport function usePostCountryService(apiQuery: string): Service<Country[]> {\r\n  const [result, setResult] = useState<Service<Country[]>>({\r\n    status: \"loading\",\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetch(apiQuery)\r\n      .then(res => {\r\n        if (!res.ok) {\r\n          if (res.status === 404) return []\r\n          throw Error(res.status.toString())\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(\r\n        res => setResult({ status: \"loaded\", payload: res }),\r\n        err => setResult({ status: \"error\", error: err })\r\n      )\r\n  }, [apiQuery])\r\n\r\n  return result\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"components/App/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}
{"version":3,"sources":["assets/constants/themes.ts","components/ThemeContext/ThemeContext.tsx","components/ThemeSwitch/ThemeSwitch.tsx","components/PageLayout/PageLayout.tsx","components/Search/Search.tsx","components/Filter/Filter.tsx","components/CountryCard/CountryCard.tsx","components/CountryList/CountryList.tsx","components/Home/Home.tsx","components/CountryDetails/CountryDetails.tsx","components/App/App.tsx","hooks/useLocation.ts","hooks/useApiControls.ts","hooks/usePostCountryService.ts","serviceWorker.ts","index.tsx"],"names":["dark","textColor","inputColor","elementColor","backgroundColor","light","ThemeContext","React","createContext","darkMode","colors","theme","toggle","ThemeProvider","children","useState","setDarkMode","Provider","value","ThemeSwitch","useContext","onClick","className","PageLayout","style","color","Search","onChange","type","name","id","placeholder","target","Filter","onChoice","CountryCard","props","src","flag","alt","population","region","capital","CountryList","service","showDetails","status","payload","length","map","country","i","key","alpha3Code","error","toString","Home","searchByCountryName","searchByRegion","action","CountryDetails","goBack","nativeName","borders","App","location","currentView","setCurrentView","countryCode","code","goHome","useLocation","apiBase","apiFields","apiFieldsDetailed","apiQuery","setApiQuery","searchByCode","useApiControls","result","setResult","useEffect","fetch","then","res","ok","Error","json","err","usePostCountryService","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d6b74bb.chunk.js","sourcesContent":["export default {\r\n  dark: {\r\n    textColor: \"hsl(0, 0%, 100%)\",\r\n    inputColor: \"hsl(0, 0%, 100%)\",\r\n    elementColor: \"hsl(209, 23%, 22%)\",\r\n    backgroundColor: \"hsl(207, 26%, 17%)\"\r\n  },\r\n  light: {\r\n    textColor: \"hsl(200, 15%, 8%)\",\r\n    inputColor: \"hsl(0, 0%, 52%)\",\r\n    elementColor: \"hsl(0, 0%, 100%)\",\r\n    backgroundColor: \"hsl(0, 0%, 98%)\"\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport theme from \"assets/constants/themes\"\r\n\r\nexport const ThemeContext = React.createContext({\r\n  darkMode: false,\r\n  colors: theme.light,\r\n  toggle: () => {},\r\n})\r\n\r\nexport const ThemeProvider: React.FC<{}> = ({ children }) => {\r\n  const [darkMode, setDarkMode] = useState(true)\r\n\r\n  const toggle = () => {\r\n    const isDark = !darkMode\r\n    setDarkMode(isDark)\r\n  }\r\n\r\n  const colors = darkMode ? theme.dark : theme.light\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, colors, toggle }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport CrescentMoonIcon from \"@material-ui/icons/Brightness3\"\r\nimport SunIcon from \"@material-ui/icons/WbSunny\"\r\n\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\nimport \"./ThemeSwitch.css\"\r\n\r\nexport const ThemeSwitch: React.FC = () => {\r\n  const { darkMode, toggle } = useContext(ThemeContext)\r\n  return (\r\n    <button onClick={toggle} className=\"theme-toggle\">\r\n      {darkMode ? (\r\n        <>\r\n          <SunIcon className=\"theme-toggle__icon\" />\r\n          &nbsp;Day Mode\r\n        </>\r\n      ) : (\r\n        <>\r\n          <CrescentMoonIcon className=\"theme-toggle__icon theme-toggle__icon--rotate\" />\r\n          &nbsp;Night Mode\r\n        </>\r\n      )}\r\n    </button>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\nimport { ThemeSwitch } from 'components/ThemeSwitch/ThemeSwitch'\r\n\r\nexport const PageLayout: React.FC<{}> = ({ children }) => {\r\n  const { colors } = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className=\"page\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.backgroundColor,\r\n      }}\r\n    >\r\n      <header\r\n        className=\"page__header\"\r\n        style={{\r\n          backgroundColor: colors.elementColor,\r\n        }}\r\n      >\r\n        <h1 className=\"header__title\">Where in the world?</h1>\r\n        <ThemeSwitch />\r\n      </header>\r\n      <main className=\"page__content\">{children}</main>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\nimport \"./Search.css\"\r\n\r\ninterface Props {\r\n  onChange: Function\r\n}\r\n\r\nexport const Search: React.FC<Props> = ({ onChange }) => {\r\n  const { colors } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div\r\n      className=\"controls__search\"\r\n      style={{\r\n        color: colors.inputColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n    >\r\n      <SearchIcon />\r\n      <input\r\n        type=\"text\"\r\n        name=\"search\"\r\n        id=\"search\"\r\n        placeholder=\"Search for a country...\"\r\n        onChange={({ target }) => onChange(target.value)}\r\n        className=\"search__input\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\n\r\ninterface Props {\r\n  onChoice: Function\r\n}\r\n\r\nexport const Filter: React.FC<Props> = ({ onChoice }) => {\r\n  const { colors } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <select\r\n      id=\"region\"\r\n      name=\"region\"\r\n      className=\"controls__filter\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n      onChange={({ target }) => onChoice(target.value)}\r\n    >\r\n      <option value=\"Africa\">Africa</option>\r\n      <option value=\"Americas\">Americas</option>\r\n      <option value=\"Asia\">Asia</option>\r\n      <option value=\"Europe\">Europe</option>\r\n      <option value=\"Oceania\">Oceania</option>\r\n    </select>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\n\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\nimport { Country } from \"types/Country\"\r\n\r\nimport \"./CountryCard.css\"\r\n\r\nexport const CountryCard: React.FC<Country> = props => {\r\n  const { colors } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n    >\r\n      <img\r\n        src={props.flag}\r\n        alt={`${props.name}'s flag`}\r\n        className=\"card__img\"\r\n      />\r\n      <div className=\"card__info\">\r\n        <p className=\"card__title\">{props.name}</p>\r\n        <span>Population: {props.population}</span>\r\n        <br />\r\n        <span>Region: {props.region}</span>\r\n        <br />\r\n        <span>Capital: {props.capital}</span>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Country } from \"types/Country\"\r\nimport { Service } from \"types/Service\"\r\nimport { CountryCard } from \"components/CountryCard/CountryCard\"\r\nimport \"./CountryList.css\"\r\n\r\ninterface Props {\r\n  service: Service<Country[]>\r\n  showDetails: Function\r\n}\r\n\r\nexport const CountryList: React.FC<Props> = ({ service, showDetails }) => (\r\n  <>\r\n    {service.status === \"loading\" && \"Loading...\"}\r\n    {service.status === \"loaded\" && (\r\n      <ul className=\"country-list\">\r\n        {service.payload && service.payload.length\r\n          ? service.payload.map((country: Country, i: number) => (\r\n              <li\r\n                key={i}\r\n                className={\r\n                  \"country-list__item\" + ((i === service.payload.length - 1)\r\n                    ? \" country-list__item--last\"\r\n                    : \"\")\r\n                }\r\n                onClick={() => showDetails(country.alpha3Code)}\r\n              >\r\n                <CountryCard {...country} />\r\n              </li>\r\n            ))\r\n          : \"Nothing found.\"}\r\n      </ul>\r\n    )}\r\n    {service.status === \"error\" && service.error.toString()}\r\n  </>\r\n)\r\n","import React from \"react\"\r\nimport { Search } from \"components/Search/Search\"\r\nimport { Filter } from \"components/Filter/Filter\"\r\nimport { CountryList } from \"components/CountryList/CountryList\"\r\nimport { Service } from \"types/Service\"\r\nimport { Country } from \"types/Country\"\r\n\r\ninterface Props {\r\n  service: Service<Country[]>\r\n  showDetails: Function\r\n  searchByCountryName: Function\r\n  searchByRegion: Function\r\n}\r\n\r\nexport const Home: React.FC<Props> = ({\r\n  service,\r\n  showDetails,\r\n  searchByCountryName,\r\n  searchByRegion,\r\n}) => {\r\n  return (\r\n    <>\r\n      <form action=\"#\" className=\"controls\">\r\n        <Search onChange={searchByCountryName} />\r\n        <Filter onChoice={searchByRegion} />\r\n      </form>\r\n      <CountryList service={service} showDetails={showDetails} />\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { ThemeContext } from \"components/ThemeContext/ThemeContext\"\r\nimport { CountryInfo } from \"types/CountryInfo\"\r\n\r\nimport \"./CountryDetails.css\"\r\n\r\n// interface Props extends Service<Country[]> {}\r\ninterface Props extends CountryInfo {\r\n  goBack: Function\r\n}\r\n\r\nexport const CountryDetails: React.FC<Props> = props => {\r\n  const { colors } = useContext(ThemeContext)\r\n  return (\r\n    <>\r\n      <div className=\"country-details\">\r\n        <div className=\"country-details__controls\">\r\n          <button className=\"controls__back\" onClick={() => props.goBack()}>\r\n            Back\r\n          </button>\r\n        </div>\r\n        <div className=\"country-details__content\">\r\n          <figure className=\"content__flag\">\r\n            <img\r\n              src={props.flag}\r\n              alt={`${props.name}'s flag.`}\r\n              className=\"flag__img\"\r\n            />\r\n          </figure>\r\n          <div className=\"content__text\">\r\n            <header className=\"text__header\">{props.name}</header>\r\n            <ul className=\"text__details-list\">\r\n              {/* Convert this list to map */}\r\n              <li className=\"details-list__item\">\r\n                Native Name: {props.nativeName}\r\n              </li>\r\n              <li className=\"details-list__item\">\r\n                Population: {props.population}\r\n              </li>\r\n            </ul>\r\n            <div className=\"text__country-borders\">\r\n              Border Countries:\r\n              <ul className=\"country-borders__name-list\">\r\n                <li className=\"name-list__item\">\r\n                  {props.borders && props.borders[0]}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <p>Native name: {props.nativeName}</p> */}\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nimport \"./App.css\"\r\n\r\nimport { usePostCountryService } from \"hooks/usePostCountryService\"\r\nimport { useLocation } from \"hooks/useLocation\"\r\nimport { useApiControls } from \"hooks/useApiControls\"\r\nimport { ThemeProvider } from \"components/ThemeContext/ThemeContext\"\r\nimport { PageLayout } from \"components/PageLayout/PageLayout\"\r\nimport { Home } from \"components/Home/Home\"\r\nimport { CountryDetails } from \"components/CountryDetails/CountryDetails\"\r\n\r\nexport const App: React.FC = () => {\r\n  const { currentView, showDetails, goHome } = useLocation()\r\n  const {\r\n    apiQuery,\r\n    searchByCountryName,\r\n    searchByRegion,\r\n    searchByCode,\r\n  } = useApiControls()\r\n  const service = usePostCountryService(apiQuery)\r\n\r\n  return (\r\n    <ThemeProvider>\r\n      <PageLayout>\r\n        {currentView.location === \"home\" && (\r\n          <Home\r\n            service={service}\r\n            showDetails={(code: string) => {\r\n              searchByCode(code)\r\n              showDetails(code)\r\n            }}\r\n            searchByCountryName={searchByCountryName}\r\n            searchByRegion={searchByRegion}\r\n          />\r\n        )}\r\n        {currentView.location === \"details\" && service.status === \"loaded\" && (\r\n          <CountryDetails\r\n            goBack={() => {\r\n              searchByRegion(\"europe\") // Placeholder while making details layout\r\n              goHome()\r\n            }}\r\n            {...service.payload}\r\n          />\r\n        )}\r\n      </PageLayout>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useState } from \"react\"\r\nimport { View } from \"types/View\"\r\n\r\nexport function useLocation() {\r\n  const [currentView, setCurrentView] = useState<View>({\r\n    location: \"home\",\r\n  })\r\n\r\n  const goHome = (): void => setCurrentView({ location: \"home\" })\r\n\r\n  const showDetails = (countryCode: string): void => {\r\n    setCurrentView({ location: \"details\", code: countryCode })\r\n  }\r\n\r\n  return { currentView, showDetails, goHome }\r\n}\r\n","import { useState } from \"react\"\r\n\r\nexport function useApiControls() {\r\n  const apiBase = \"https://restcountries.eu/rest/v2\"\r\n  const apiFields = \"name;flag;population;region;capital;alpha3Code\"\r\n  const apiFieldsDetailed = `${apiFields};nativeName;subregion;topLevelDomain;currencies;languages;borders`\r\n\r\n  const [apiQuery, setApiQuery]: [string, Function] = useState(\r\n    \"responseSample.json\"\r\n    // `${apiBase}/all?fields=${apiFields}`\r\n  )\r\n\r\n  const searchByCountryName = (name: string): void => {\r\n    if (!name) setApiQuery(\"responseSample.json\")\r\n    if (name.length < 3) return\r\n\r\n    setApiQuery(`${apiBase}/name/${name}?fields=${apiFields}`)\r\n  }\r\n\r\n  const searchByRegion = (region: string): void => {\r\n    if (!region) return\r\n    setApiQuery(`${apiBase}/region/${region}?fields=${apiFields}`)\r\n  }\r\n\r\n  const searchByCode = (code: string): void => {\r\n    if (!code) return\r\n    setApiQuery(`${apiBase}/alpha/${code}?fields=${apiFieldsDetailed}`)\r\n  }\r\n\r\n  return { apiQuery, searchByCountryName, searchByRegion, searchByCode }\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { Service } from \"types/Service\"\r\nimport { Country } from \"types/Country\"\r\n\r\nexport function usePostCountryService(apiQuery: string): Service<Country[]> {\r\n  const [result, setResult] = useState<Service<Country[]>>({\r\n    status: \"loading\",\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetch(apiQuery)\r\n      .then(res => {\r\n        if (!res.ok) {\r\n          if (res.status === 404) return []\r\n          throw Error(res.status.toString())\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(\r\n        res => setResult({ status: \"loaded\", payload: res }),\r\n        err => setResult({ status: \"error\", error: err })\r\n      )\r\n  }, [apiQuery])\r\n\r\n  return result\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"components/App/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}
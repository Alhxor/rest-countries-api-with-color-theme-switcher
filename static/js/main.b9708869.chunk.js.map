{"version":3,"sources":["assets/constants/themes.ts","components/CountryCard/CountryCard.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","hooks/usePostCountryService.ts"],"names":["dark","textColor","inputColor","elementColor","backgroundColor","light","CountryCard","props","colors","useContext","Theme","className","style","color","src","flag","alt","name","population","region","capital","initialState","darkMode","theme","toggle","React","createContext","Boolean","window","location","hostname","match","ReactDOM","render","handleSearchChange","useCallback","query","setApiQuery","length","useState","apiQuery","service","status","result","setResult","useEffect","fetch","then","res","ok","Error","toString","json","payload","err","error","usePostCountryService","setDarkMode","Provider","value","onClick","action","type","id","placeholder","onChange","target","map","country","i","key","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9708869.chunk.js","sourcesContent":["export default {\r\n  dark: {\r\n    textColor: \"hsl(0, 0%, 100%)\",\r\n    inputColor: \"hsl(0, 0%, 100%)\",\r\n    elementColor: \"hsl(209, 23%, 22%)\",\r\n    backgroundColor: \"hsl(207, 26%, 17%)\"\r\n  },\r\n  light: {\r\n    textColor: \"hsl(200, 15%, 8%)\",\r\n    inputColor: \"hsl(0, 0%, 52%)\",\r\n    elementColor: \"hsl(0, 0%, 100%)\",\r\n    backgroundColor: \"hsl(0, 0%, 98%)\"\r\n  }\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport { Theme } from \"components/App/App\"\r\nimport { Country } from \"types/Country\"\r\n\r\nimport \"./CountryCard.css\"\r\n\r\nexport default function CountryCard(props: Country): JSX.Element {\r\n  const { colors } = useContext(Theme)\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        color: colors.textColor,\r\n        backgroundColor: colors.elementColor,\r\n      }}\r\n    >\r\n      <img\r\n        src={props.flag}\r\n        alt={`${props.name}'s flag`}\r\n        className=\"card__img\"\r\n      />\r\n      <div className=\"card__info\">\r\n        <p className=\"card__title\">{props.name}</p>\r\n        <span>Population: {props.population}</span>\r\n        <br />\r\n        <span>Region: {props.region}</span>\r\n        <br />\r\n        <span>Capital: {props.capital}</span>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useCallback } from \"react\"\r\n\r\nimport \"./App.css\"\r\n\r\nimport theme from \"assets/constants/themes\"\r\n\r\nimport { Country } from \"types/Country\"\r\nimport usePostCountryService from \"hooks/usePostCountryService\"\r\n\r\nimport CountryCard from \"components/CountryCard/CountryCard\"\r\n\r\nconst initialState = {\r\n  darkMode: false,\r\n  colors: theme.light,\r\n  toggle: () => {},\r\n}\r\n\r\nexport const Theme = React.createContext(initialState)\r\n\r\nexport default function App(): JSX.Element {\r\n  const handleSearchChange = useCallback((query: string) => {\r\n    if (!query) setApiQuery(\"http://localhost:3000/responseSample.json\")\r\n    if (query.length < 3) return\r\n    setApiQuery(\r\n      `https://restcountries.eu/rest/v2/name/${query}` +\r\n        `?fields=name;flag;population;region;capital`\r\n    )\r\n  }, [])\r\n\r\n  // const service = usePostCountryService(\r\n  //   `https://restcountries.eu/rest/v2/all?fields=name;flag;population;region;capital`\r\n  // )\r\n\r\n  const [apiQuery, setApiQuery]: [string, Function] = useState(\r\n    \"http://localhost:3000/responseSample.json\"\r\n  )\r\n  const service = usePostCountryService(apiQuery)\r\n\r\n  const [darkMode, setDarkMode] = useState(false)\r\n\r\n  const toggle = () => {\r\n    const isDark = !darkMode\r\n    setDarkMode(isDark)\r\n  }\r\n\r\n  const colors = darkMode ? theme.dark : theme.light\r\n\r\n  return (\r\n    <Theme.Provider value={{ darkMode, colors, toggle }}>\r\n      <div\r\n        className=\"page\"\r\n        style={{\r\n          color: colors.textColor,\r\n          backgroundColor: colors.backgroundColor,\r\n        }}\r\n      >\r\n        <header\r\n          className=\"page__header\"\r\n          style={{\r\n            backgroundColor: colors.elementColor,\r\n          }}\r\n        >\r\n          <h1>Where in the world?</h1>\r\n          <button onClick={toggle} className=\"themeToggle\">\r\n            Switch theme\r\n          </button>\r\n        </header>\r\n        <main className=\"page__content\">\r\n          <form action=\"#\" className=\"controls\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"search\"\r\n              placeholder=\"Search for a country...\"\r\n              onChange={({ target }) => handleSearchChange(target.value)}\r\n              className=\"controls__search\"\r\n              style={{\r\n                color: colors.inputColor,\r\n                backgroundColor: colors.elementColor,\r\n              }}\r\n            />\r\n            <select\r\n              id=\"region\"\r\n              name=\"region\"\r\n              className=\"controls__filter\"\r\n              style={{\r\n                color: colors.textColor,\r\n                backgroundColor: colors.elementColor,\r\n              }}\r\n            >\r\n              <option value=\"Africa\">Africa</option>\r\n              <option value=\"America\">America</option>\r\n              <option value=\"Asia\">Asia</option>\r\n              <option value=\"Europe\">Europe</option>\r\n              <option value=\"Oceania\">Oceania</option>\r\n            </select>\r\n          </form>\r\n          {service.status === \"loading\" && \"Loading...\"}\r\n          {service.status === \"loaded\" && (\r\n            <ul>\r\n              {(service.payload && service.payload.length) ?\r\n                service.payload.map((country: Country, i: number) => (\r\n                  <li key={i}>\r\n                    <CountryCard {...country} />\r\n                  </li>\r\n                )) : \"Nothing found.\"}\r\n            </ul>\r\n          )}\r\n          {service.status === \"error\" && service.error.toString()}\r\n        </main>\r\n      </div>\r\n    </Theme.Provider>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"components/App/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { useEffect, useState } from \"react\"\r\nimport { Service } from \"types/Service\"\r\nimport { Country } from \"types/Country\"\r\n\r\nexport default function usePostCountryService(apiQuery: string) {\r\n  const [result, setResult] = useState<Service<Country[]>>({\r\n    status: \"loading\",\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetch(apiQuery)\r\n      .then(res => {\r\n        if (!res.ok) {\r\n          if (res.status === 404) return []\r\n          throw Error(res.status.toString())\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(\r\n        res => setResult({ status: \"loaded\", payload: res }),\r\n        err => setResult({ status: \"error\", error: err })\r\n      )\r\n  }, [apiQuery])\r\n\r\n  return result\r\n}\r\n"],"sourceRoot":""}